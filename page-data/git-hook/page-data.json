{"componentChunkName":"component---src-templates-blog-post-js","path":"/git-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Overblog","author":"zit"}},"markdownRemark":{"id":"8476dab6-6886-5c1b-b288-fe2c212e75f9","html":"<h3 id=\"介绍-git-hook\"><a href=\"#%E4%BB%8B%E7%BB%8D-git-hook\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>介绍 Git Hook</h3>\n<p><code class=\"language-text\">Git Hook</code> 是 Git 执行命令时前后可以触发的的脚本，比如 pre-commit ，在提交前执行某些东西，这个也是在前端体系中用的较多的一个 Hook，常见的使用一般也是搭配 Husky 和 lint-staged ，做代码提交前的检查。还有其他的比如，pre-rebase 、 post-rewrite 、post-checkout 、post-merge ，看名字就知道他们的执行时间了。</p>\n<h3 id=\"怎么快速创建自己的钩子？\"><a href=\"#%E6%80%8E%E4%B9%88%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%92%A9%E5%AD%90%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>怎么快速创建自己的钩子？</h3>\n<ol>\n<li>创建一个文件，命名为对应的钩子名称，语言随便，这里用的nodejs</li>\n<li>将文件放到项目下的 .git/hooks</li>\n<li>chmod 777 xxx(你的文件) ，将文件改为可执行文件</li>\n</ol>\n<p>使用对应的 git 命令，钩子就生效啦</p>\n<h3 id=\"本文主角--pre-commit\"><a href=\"#%E6%9C%AC%E6%96%87%E4%B8%BB%E8%A7%92--pre-commit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本文主角 👉 pre-commit</h3>\n<p>直接上代码</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> execSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 客户端文件夹名称</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token string\">'client-src'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> stagedFile <span class=\"token operator\">=</span> <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git diff --cached --name-only'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>encoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">// 提交文件包含 client 下文件，不包含 views/index.html</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stagedFile<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>stagedFile<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cd </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>client<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &amp;&amp; npm run build</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n   process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>代码的目的是当 staged 的文件中包含 client 下的文件时，在 client 下执行 build，跟我们的项目结构有关。\n<code class=\"language-text\">git diff --cached --name-only</code> 是获取 stage 的文件，可以根据条件来执行某些逻辑。\nprocess.exit(0) 是可以继续执行 commit，0 之外的返回，会打断 commit 。</p>\n<p>So easy? 就是这么简单，然鹅不得不说 git 是个很庞大的技术栈，数不清的命令…</p>\n<p>快去试试你自己的钩子吧～不要忘了 chmod 777 赋予文件可执行权限哟～</p>","timeToRead":2,"frontmatter":{"title":"怎么用 nodejs 写一个 Git Hook","date":"December 27, 2020","spoiler":"Git Hook","cta":"git"},"fields":{"slug":"/git-hook/","langKey":"en"}}},"pageContext":{"slug":"/git-hook/","previous":{"fields":{"slug":"/react-useEffect/","langKey":"en","directoryName":"react-useEffect"},"frontmatter":{"title":"react - useEffect 小记"}},"next":null,"translations":[],"translatedLinks":[]}},"staticQueryHashes":["708209134"]}