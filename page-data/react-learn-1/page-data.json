{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-learn-1/","result":{"data":{"site":{"siteMetadata":{"title":"Overblog","author":"zit"}},"markdownRemark":{"id":"257550fd-4b34-5b81-8048-c928870bd591","html":"<h2 id=\"react-components-elements-and-instances\"><a href=\"#react-components-elements-and-instances\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Components, Elements, and Instances</h2>\n<ol>\n<li>Components 是创建的组件。</li>\n<li>Instances 是创建的组件的实例，比如，创建了一个<code class=\"language-text\">&lt;Button /&gt;</code>组件，在<code class=\"language-text\">&lt;Form /&gt;</code>中使用了很多次，那么每一个就是一个实例。</li>\n<li>\n<p>Elements 是一个普通对象，用来描述上面说的组件实例、原生 Dom 元素，和它们的属性。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     className<span class=\"token operator\">:</span> <span class=\"token string\">'button button-blue'</span><span class=\"token punctuation\">,</span>\n     children<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        children<span class=\"token operator\">:</span> <span class=\"token string\">'OK!'</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>本质就是一个 object，描述一个原生按钮，包括它的属性、子元素。如果是描述一个 instance，type 会是定义的组件，比如：<code class=\"language-text\">type: &#39;Button&#39;</code>。\nReact 对这两类的处理有什么不一样呢？如果是实例类型，React 会询问对应组件渲染返回的内容。而组件返回的也是一个 element 对象。这样周而复始，React 就组建了一个描述界面所需的所有元素的普通对象。</p>\n</li>\n<li>\n<p>Top-Down Reconciliation<br>\n上面描述的过程大概是酱紫，假设根组件是一个 Form</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">ReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token attr-name\">isSubmitted</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">buttonText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ok<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">queryElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>React 首先会问 Form 返回什么样的 element tree，再基于这个树，层层往下的构建一整个树</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Form</span>\n<span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> Form<span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     isSubmitted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n     buttonText<span class=\"token operator\">:</span> <span class=\"token string\">'OK!'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Form 告诉 React 返回的 element 结构</span>\n<span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> Button<span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     children<span class=\"token operator\">:</span> <span class=\"token string\">'OK!'</span><span class=\"token punctuation\">,</span>\n     color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Button 再告诉 React 返回的 element 结构</span>\n<span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     className<span class=\"token operator\">:</span> <span class=\"token string\">'button button-blue'</span><span class=\"token punctuation\">,</span>\n     children<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        children<span class=\"token operator\">:</span> <span class=\"token string\">'OK!'</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 到原生元素就结束了</span></code></pre></div>\n<p>上面的过程是 React reconciliation 的一部分，它结束的时候，React 已经有了完成的一个 element tree。然后 React renderer 会将最小的改动集合应用到界面上。</p>\n</li>\n</ol>\n<p>值得说明的是，instances 在 React 中并不重要，它自己会创建每一个类组件的实例并管理它。</p>\n<h2 id=\"reconciliation\"><a href=\"#reconciliation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reconciliation</h2>\n<p>是 React 中负责处理更新的模块，包含了 Diff 算法。\n因为使用现有算法比较两个 element tree，复杂度太高，React 定义了两个假设：</p>\n<ol>\n<li>两个不一样类型的元素会产生不同的树</li>\n<li>\n<p>开发者可以通过 key 属性来标示某个元素在不同的渲染中可能是不变的</p>\n<h3 id=\"the-diffing-algorithm\"><a href=\"#the-diffing-algorithm\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Diffing Algorithm</h3>\n<p>React 在比较树时，会先对比根元素，如果两个元素不一样，会直接舍弃旧树，构建新树。舍弃旧树时，如果是 class 组件， <code class=\"language-text\">componentWillUnmount()</code> 会被调用。构建新树时，<code class=\"language-text\">UNSAFE_componentWillMount()</code> 会被调用。</p>\n</li>\n</ol>\n<p>当比较相同类型的 Dom 类元素时，React 只会查找属性并<strong>只</strong>更新改变的。当处理完当前元素时，会遍历(recurse)处理它的子元素。</p>\n<p>当比较相同类型的组件实例时，React 会更新实例的 props，并调用 <code class=\"language-text\">UNSAFE_componentWillReceiveProps()</code>，<code class=\"language-text\">UNSAFE_componentWillUpdate()</code> and <code class=\"language-text\">componentDidUpdate()</code>。16.3 之后的版本，会调用 <code class=\"language-text\">static getDerivedStateFromProps()</code>。\n需要注意的是，组件的状态会跨院更新存在。</p>\n<p>然后，<code class=\"language-text\">render()</code>方法被调用，react 会对返回的结果和之前的结果，递归的执行 diff 算法。</p>\n<h3 id=\"recursing-on-children\"><a href=\"#recursing-on-children\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursing On Children</h3>\n<p>默认情况下，对于 Dom 元素，React 同一时间比对它们的子元素，同一位置只要不一样就会生成一个改变。而下面的例子 1 和 2，性能方面明显是 2 好于 1 的，因为 React 不知道哪些元素可以保留复用。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">   <span class=\"token comment\">// 1</span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">first</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">second</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">first</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">second</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">third</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">   <span class=\"token comment\">// 2</span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Duke</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Villanova</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Connecticut</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Duke</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Villanova</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>所以，我们使用 key 属性告诉 React，哪些元素在更新前后是同一个元素，如果更新后仍然存在，React 需要做的可能就是更新一下属性，挪动一下位置，而不用重新生成，提高了性能。</p>\n<p>这里有个需要注意的地方，不要使用数组索引作为 key，尤其是在数组会重新排序的情况下。为什么呢？通过上面可以知道，React 使用 key 来确认同一个元素，然后只更新它的 props。这里的元素可能是 Dom 节点，也可能是组件实例。\n对于 Dom 节点，主要是 form 类元素，它们有默认的内部状态(没搜到浏览器对于此类元素对处理)。对于实例，我们假设它内部有 form 类元素，或者有自己的状态。然后触发一次倒序排列，因为使用数组索引作为 key，所以同一位置的 key 不变。\nreact 在 diff 新树和旧树时，发现同一位置的 key 一致，就只更新它的 props，保留它的状态。这就产生了问题，<strong>更新完后排在第一个的实例，使用的是最后一个实例的 props，但 state 还是更新之前的状态</strong>。\n我改了下<a href=\"https://reactjs.org/redirect-to-codepen/reconciliation/index-used-as-key\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方</a>的例子，在 input 元素的默认状态之外，加了个自己定义的状态，可以更清楚的看到，props 改变，state 未变：<a href=\"https://codesandbox.io/s/stupefied-snow-f1bxb?file=/src/App.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codesandbox.io/s/stupefied-snow-f1bxb?file=/src/App.js</a></p>\n<p><code class=\"language-text\">Math.random()</code>也不要用，每次更新 key 都不一样，会导致不必要的实例创建。</p>","timeToRead":4,"frontmatter":{"title":"最近读的几篇 react 文章","date":"January 23, 2021","spoiler":"老文章读来也有收获。","cta":"react"},"fields":{"slug":"/react-learn-1/","langKey":"en"}}},"pageContext":{"slug":"/react-learn-1/","previous":{"fields":{"slug":"/git-hook/","langKey":"en","directoryName":"git-hook"},"frontmatter":{"title":"怎么用 nodejs 写一个 Git Hook"}},"next":null,"translations":[],"translatedLinks":[]}},"staticQueryHashes":["708209134"]}