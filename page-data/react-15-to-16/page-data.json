{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-15-to-16/","result":{"data":{"site":{"siteMetadata":{"title":"Overblog","author":"zit"}},"markdownRemark":{"id":"5b2ff3a9-fe05-5f5a-b9d7-d38475507209","html":"<ol>\n<li>react 16.9.0 剥离了 <code class=\"language-text\">prop-types</code>，需要安装 <code class=\"language-text\">prop-types</code> 单独引用</li>\n<li>\n<p><code class=\"language-text\">javascript:; &#39;&#39; React 16.9.0 deprecates javascript: URLs</code>\n因为安全原因，react 16.9 开始禁用了 <code class=\"language-text\">javascript:</code> 链接，用 <code class=\"language-text\">onClick={e =&gt; e.preventDefault()}</code> 代替，或者使用button按钮。</p>\n<blockquote>\n<p>Warning: A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed “javascript:void(0)“.</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">react-hot-loader</code> 推荐使用 <code class=\"language-text\">react-refresh</code> 代替了</li>\n<li>\n<p>setstate 中再调用 setstate</p>\n<blockquote>\n<p>Warning: An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.</p>\n</blockquote>\n</li>\n</ol>\n<p>问题出在用 this.setState 的 callback 的方式，但是在callback里又调用了setState, 比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> aaa <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>所以应该返回新的state:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> aaa <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果必须再使用 setState ，建议换个写法。</p>\n<p>5 . API 替换</p>\n<ul>\n<li>componentWillMount\n一般初始化操作放到constructor，获取数据等有副作用操作放到componentDidMount</li>\n<li>componentWillReceiveProps\n这个API涉及到父组件，需要结合业务和本组件内的逻辑来修改，优先考虑拆分清楚组件状态，最好是单一数据源，也可以用getDerivedStateFromProps替代（有必要的话），参考<a href=\"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你可能不需要使用派生 state</a></li>\n</ul>\n<p>6 . 父组件两次渲染，完全受控的组件直接修改props，会污染父组件的state\n应该是和 props 引用相关，子组件的避免直接修改，可以深拷贝一个，再改。</p>","timeToRead":1,"frontmatter":{"title":"react 15.4.2 到 16.13.1 升级过程","date":"August 08, 2020","spoiler":"纯记录","cta":"react"},"fields":{"slug":"/react-15-to-16/","langKey":"en"}}},"pageContext":{"slug":"/react-15-to-16/","previous":null,"next":{"fields":{"slug":"/sentry/","langKey":"en","directoryName":"sentry"},"frontmatter":{"title":"sentry 部署极简教程"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["708209134"]}