{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-learn-2/","result":{"data":{"site":{"siteMetadata":{"title":"Overblog","author":"zit"}},"markdownRemark":{"id":"1f3f8a3c-4784-5047-94fa-0817133f8676","html":"<h1 id=\"react-fiber-architecture\"><a href=\"#react-fiber-architecture\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Fiber Architecture</h1>\n<p>先来了解几个前置概念</p>\n<h2 id=\"what-is-reconciliation（什么是协调）\"><a href=\"#what-is-reconciliation%EF%BC%88%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E8%B0%83%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is reconciliation?（什么是协调）</h2>\n<p>React 用来比较两个元素树，决定哪部分需要改变的算法。</p>\n<p>React 在更新时，有些元素的属性和状态是没有改变的，全部更新一遍会造成浪费，导致处理速度变慢，使用更多的资源等，这就需要一些优化手段，而这些优化就是 reconciliation 的一部分。</p>\n<p>我们通常所说的虚拟”DOM”（“virtual DOM”），它背后的算法就是 reconciliation。</p>\n<p>虽然Fiber 是对 reconciler 的重写，但是针对协调器的两个假设还是奏效的：</p>\n<ul>\n<li>两个不一样类型的元素会产生不同的树，react 会直接替换</li>\n<li>列表使用 key 进行区分</li>\n</ul>\n<h2 id=\"reconciliation-versus-rendering（协调-vs-渲染）\"><a href=\"#reconciliation-versus-rendering%EF%BC%88%E5%8D%8F%E8%B0%83-vs-%E6%B8%B2%E6%9F%93%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reconciliation versus rendering（协调 VS 渲染）</h2>\n<p>DOM 只是 React 可以渲染的环境之一，除此之外还可以向移动端渲染，所以虚拟”DOM”的叫法其实有点错误，它只是在存在于内存中的一个元素树而已。</p>\n<p>React 的协调和渲染是分离的，所以可以支持多端渲染，</p>\n<p>Fiber 重写了 reconciler，对应的渲染部分也需要做修改适配新架构。</p>\n<h2 id=\"scheduling（调度）\"><a href=\"#scheduling%EF%BC%88%E8%B0%83%E5%BA%A6%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling（调度）</h2>\n<p>调度是个新概念，决定何时应执行工作（work）的过程</p>\n<p>React 的一个设计原则是，使用拉取（pull）的方式处理数据和 UI 的关系，这样就可以在必要的时候才执行工作，未执行的可以被挂起等待拉取。有些库则使用推送（push）的方式，没办法调度。</p>\n<p>在一个界面上，不是每一次更新都必须马上被应用，这么做有时候还会引起掉帧。就得给不同类型的更新排优先级了，比如动画更新的优先级就高一点。那么谁来做决定优先级这个工作呢，基于拉取（pull）的 react 是自己做，基于推送（push）的库只能靠开发者来做。</p>\n<p>为了利用调度彻底修改 react 的核心算法，是 fiber 背后的驱动力。</p>\n<p>所以…</p>\n<h2 id=\"what-is-a-fiber（什么是一个-fiber-？）\"><a href=\"#what-is-a-fiber%EF%BC%88%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E4%B8%AA-fiber-%EF%BC%9F%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a fiber?（什么是一个 fiber ？）</h2>\n<p>准确的说，react 为了利用调度想达到的目标有以下 4 个：</p>\n<ul>\n<li>停止某个工作，稍后可以回来继续执行</li>\n<li>为不同类型的工作赋予优先级</li>\n<li>重用之前完成的工作</li>\n<li>不再需要的时候舍弃工作</li>\n</ul>\n<p>为了达到目标，首先需要将工作拆解成多个单元。某种意义上来说，这就是一个 fiber，一个 fiber 代表一个工作单位。</p>\n<p>先来回忆下一个概念，<code class=\"language-text\">v = f(d)</code>，表示 react 组件就是数据到 UI 的转换。因此，渲染 react app 类似于函数，其内部调用了其它函数，内部的函数又调用了别的函数，以此继续下去。</p>\n<p>这就形成了一个调用栈，当一个新函数执行时，栈顶都会增加一个栈帧（stack frame），这个栈帧代表了这个函数执行的工作。</p>\n<p>当处理 UI 时，一下子执行太多的工作，可能会引起掉帧。而且有些工作可能还是没必要的。这是 UI 组件和一般函数不同的地方，它更复杂，有更多的关注点。</p>\n<p>新版本的浏览器提供了两个帮助解决此类问题的 API ：<code class=\"language-text\">requestIdleCallback</code> 和 <code class=\"language-text\">requestAnimationFrame</code>，但是不够灵活。</p>\n<p>所以有了 React Fiber，为了自定义调用栈的行为，专门优化 UI 渲染，随时打断调用栈，手动管理栈帧，这就很灵活了，可以做的事情很多。</p>\n<p>Fiber 可以看作是专门为了 react 组件进行的、对栈的重新实现。可以认为一个单独的 fiber 就是一个虚拟的栈帧。</p>\n<p>重新实现栈可以让栈帧保存在内存中，随时调用，想怎么用就怎么用，对达到调度的目标至关重要。</p>\n<h3 id=\"structure-of-a-fiber（fiber-的架构）\"><a href=\"#structure-of-a-fiber%EF%BC%88fiber-%E7%9A%84%E6%9E%B6%E6%9E%84%EF%BC%89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structure of a fiber（fiber 的架构）</h3>\n<p>具体来说，一个 fiber 就是一个包含组件信息和它的输入输出的 JS 对象。</p>\n<p>一个 fiber 对应一个栈帧，也对应一个组件的一个实例。</p>\n<h4 id=\"type-and-key\"><a href=\"#type-and-key\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>type and key</h4>\n<p>和 react element 的 type、key 一样</p>\n<h3 id=\"child-and-sibling\"><a href=\"#child-and-sibling\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>child and sibling</h3>\n<p>这两个字段指向其它的 fiber。child 就是 render 方法返回的值。</p>\n<p>当返回多个 child 时，比如</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child1</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child2</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Parent 的 child 是 Child1, Child1 的 sibling fiber 是 child2.</p>\n<p>可以将 child fiber 类比尾调用函数（tail-called function）</p>\n<h3 id=\"return\"><a href=\"#return\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>return</h3>\n<p>return fiber 表示处理完当前 fiber 之后，应该返回的 fiber。也可以认为是 parent fiber。对比栈帧理解，处理完顶部的，返回下一个。</p>\n<h3 id=\"pendingprops-and-memoizedprops\"><a href=\"#pendingprops-and-memoizedprops\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pendingProps and memoizedProps</h3>\n<p>props 是一个函数的参数。一个 fiber 开始执行时设置的 props 称作 <code class=\"language-text\">pendingProps</code>, 执行完之后设置的称作 <code class=\"language-text\">memoizedProps</code>。</p>\n<p>当传入一个 fiber 的 <code class=\"language-text\">pendingProps</code> 等于 <code class=\"language-text\">pendingProps</code> 时，表明这个 fiber 上一次的输出可以被复用，避免不必要的工作。</p>\n<h3 id=\"pendingworkpriority\"><a href=\"#pendingworkpriority\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pendingWorkPriority</h3>\n<p>一个数字，标示一个 fiber 代表的工作的优先级。除了 0 之外，越大的数字表示越低的优先级。<code class=\"language-text\">scheduler</code> 使用优先级字段来查找下一个需要执行的工作单元。</p>\n<h3 id=\"alternate\"><a href=\"#alternate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>alternate</h3>\n<h4 id=\"flush\"><a href=\"#flush\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>flush</h4>\n<p>冲洗一个 fiber 就是将它的输出渲染到界面</p>\n<h4 id=\"work-in-progress\"><a href=\"#work-in-progress\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>work-in-progress</h4>\n<p>fiber 还未执行完毕，具体地说，还未返回东西</p>\n<p>在任何时候，一个组件实例最多有两个 fiber 对应它：一个当前已经冲洗出来的，一个 work-in-progress fiber</p>\n<p>当前 fiber 的备用 fiber 是 work-in-progress fiber，work-in-progress fiber 的备用 fiber 是当前 fiber</p>\n<h3 id=\"output\"><a href=\"#output\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>output</h3>\n<p>就是当前环境的原生组件，对浏览器来说就是那些 dom 元素，<code class=\"language-text\">div</code>、<code class=\"language-text\">span</code> 等。</p>\n<p>每一个 fiber 最终都有输出，都是通过原生组件的形式。它们的输出会传输到构建的树上。</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%BA%96%E7%A8%8B\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">纤程</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%8E%92%E7%A8%8B\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">排程</a></p>\n<p><a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/acdlite/react-fiber-architecture</a></p>","timeToRead":5,"frontmatter":{"title":"React Fiber 架构","date":"March 03, 2021","spoiler":"老文章读来也有收获。","cta":"react"},"fields":{"slug":"/react-learn-2/","langKey":"en"}}},"pageContext":{"slug":"/react-learn-2/","previous":{"fields":{"slug":"/react-learn-1/","langKey":"en","directoryName":"react-learn-1"},"frontmatter":{"title":"最近读的几篇 react 文章"}},"next":null,"translations":[],"translatedLinks":[]}},"staticQueryHashes":["708209134"]}